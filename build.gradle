plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.openapi.generator' version '6.6.0'
    id 'de.undercouch.download' version '5.4.0'
    id "nu.studer.jooq" version "10.1.1"
    id 'com.github.node-gradle.node' version '7.1.0'
}

group = 'com.benlukka'
version = '1.0'
def openApiSpecUrl = "http://localhost:9247/appApi.json"
def outputFilePath = "src/main/resources/openapi.json"
def outputFile = file(outputFilePath)

repositories {
    mavenCentral()
}
node {
    // Specify the Node.js version to use
    version = "20.16.0" // Adjust to your preferred Node.js LTS version
    // Specify the Yarn version to use
    yarnVersion = "1.22.19" // Adjust to your preferred Yarn version
    // Set to true to download Node.js and Yarn if not found
    download = true
    // Set the working directory for Node.js/Yarn commands (your frontend root)
    nodeProjectDir = file("frontend")
    // The plugin automatically handles node_modules within nodeProjectDir
}

jar {
    manifest {
        attributes "Main-Class": "com.benlukka.MainKt"
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def http4kVersion = "5.47.0.0"
def jooqVersion = "3.20.5"
dependencies {
    // Testing
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // http4k core and format libraries
    implementation("org.http4k:http4k-core:${http4kVersion}")
    implementation("org.http4k:http4k-format-jackson:${http4kVersion}")
    implementation("org.http4k:http4k-contract:${http4kVersion}")
    implementation("org.http4k:http4k-multipart:${http4kVersion}")
    implementation("org.http4k:http4k-opentelemetry:${http4kVersion}")

    // http4k client and server (choose one of each)
    implementation("org.http4k:http4k-client-okhttp:${http4kVersion}") // For HTTP requests
    implementation("org.http4k:http4k-server-jetty:${http4kVersion}")    // The server implementation

    // http4k client for WebSockets (if needed)
    // implementation("org.http4k:http4k-client-websocket:${http4kVersion}")

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.8.0")

    // Third-party libraries
    implementation("org.jmdns:jmdns:3.5.7")

    // jOOQ dependencies
    implementation("org.jooq:jooq:${jooqVersion}")

    // PostgreSQL JDBC driver
    implementation("org.postgresql:postgresql:42.7.7")

    implementation("org.slf4j:slf4j-nop:2.0.17")
    // jOOQ code generation dependencies (typically in a separate configuration)
    // The exact configuration name may depend on your build setup (e.g., jooqGenerator)
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-codegen:${jooqVersion}"
    jooqGenerator "org.postgresql:postgresql:42.7.7"
}

test {
    useJUnitPlatform()
}
kotlin {
    jvmToolchain(21)
    sourceSets {
        main {
            kotlin.srcDir('src/generated/jooqDatabase')
        }
        test {
            kotlin.srcDir('src/test/kotlin')
        }
    }
}

application {
    mainClass = 'MainKt'
}
tasks.register('downloadOpenApiSpec', Download) {
    description "Downloads the OpenAPI specification from the running application."
    group "build"

    src openApiSpecUrl
    dest outputFile
    overwrite true
    doFirst {
        if (!outputFile.parentFile.exists()) {
            outputFile.parentFile.mkdirs()
        }
    }
}
def frontendDistDir = file('frontend/build')

task cleanFrontend(type: Delete) {
    delete frontendDistDir
}

task yarnInstall(type: YarnTask) {
    dependsOn cleanFrontend
    args = ['install']
}

// Task to run 'yarn build'
tasks.register('yarnBuild', YarnTask) {
    dependsOn yarnInstall // Ensure dependencies are installed first
    args = ['build']
}
tasks.register('copyFrontendAssets', Copy) {
    // This task now depends on the 'yarnBuild' task
    dependsOn yarnBuild
    from frontendDistDir
    into "$buildDir/resources/main/web"
}

// OpenAPI client generation
openApiGenerate {
    generatorName = "typescript-fetch"
    inputSpec = "$projectDir/src/main/resources/openapi.json"
    outputDir = "$projectDir/frontend/src/generated"
    validateSpec = false

    typeMappings = [
            DateTime: "string",
            Date: "string"
    ]

    configOptions = [
            supportsES6: "true",
            enumPropertyNaming: "UPPERCASE",
            modelPropertyNaming: "original",
            useSingleRequestParameter: "true",
            withInterfaces: "true",
            includeUnreferencedSchemas: "true"
    ]
}
 def USERNAME = System.getenv()["POSTGRES_USER"] ?: "postgres"
 def PASSWORD = System.getenv()["POSTGRES_PASSWORD"] ?: "postgres"
/*
jooq {
    version = jooqVersion
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/TempMon"
                    user = USERNAME
                    password = PASSWORD
                }
                generator {
                    name = "org.jooq.codegen.KotlinGenerator"
                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                    }
                    target {
                        packageName = "com.benlukka.jooq"
                        directory = "src/generated/jooqDatabase"
                    }
                    generate {
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        deprecated = false
                        pojosAsKotlinDataClasses = true
                    }
                }
            }
        }
    }
}
*/

tasks.register('createOpenApiDirectory') {
    doLast {
        mkdir("$projectDir/src/main/resources")
    }
}
processResources {
    dependsOn copyFrontendAssets
}
downloadOpenApiSpec.dependsOn createOpenApiDirectory
