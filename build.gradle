plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.openapi.generator' version '6.6.0'
    id 'de.undercouch.download' version '5.4.0'
    id "nu.studer.jooq" version "10.1.1"
}

group = 'com.benlukka'
version = '1.0-SNAPSHOT'
def openApiSpecUrl = "http://localhost:9000/appApi.json"
def outputFilePath = "src/main/resources/openapi.json"
def outputFile = file(outputFilePath)

repositories {
    mavenCentral()
}
def http4kVersion = "5.47.0.0"
def jooqVersion = "3.20.5"
dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation("org.jmdns:jmdns:3.5.7")
    implementation("org.http4k:http4k-client-okhttp:${http4kVersion}")
    implementation("org.http4k:http4k-client-fuel:${http4kVersion}")
    implementation("org.http4k:http4k-client-websocket:${http4kVersion}")
    implementation("org.http4k:http4k-core:${http4kVersion}")
    implementation("org.http4k:http4k-format-jackson:${http4kVersion}")
    implementation("org.http4k:http4k-contract:${http4kVersion}")
    implementation("org.http4k:http4k-multipart:${http4kVersion}")
    implementation("org.http4k:http4k-server-undertow:${http4kVersion}")
    implementation("org.http4k:http4k-template-handlebars:${http4kVersion}")
    implementation("org.http4k:http4k-server-jetty:${http4kVersion}")
    implementation("org.http4k:http4k-client-websocket:${http4kVersion}")
    implementation("org.http4k:http4k-opentelemetry:${http4kVersion}")

    // jOOQ dependencies
    implementation("org.jooq:jooq:${jooqVersion}")
    implementation("org.jooq:jooq-meta:${jooqVersion}")
    implementation("org.jooq:jooq-codegen:${jooqVersion}")
    jooqGenerator "org.postgresql:postgresql:42.7.7"

    // PostgreSQL JDBC driver
    implementation("org.postgresql:postgresql:42.7.7")
}

test {
    useJUnitPlatform()
}
kotlin {
    jvmToolchain(23)
}

application {
    mainClass = 'com.benlukka.MainKt'
}
tasks.register('downloadOpenApiSpec', Download) {
    description "Downloads the OpenAPI specification from the running application."
    group "build"

    src openApiSpecUrl
    dest outputFile
    overwrite true
    onlyIfNewer true // Only download if the remote file is newer than the local one
    // Optional: Make the task fail if the download fails (default is true for the Download task)
    // failOnError true

    // Ensure the parent directory exists before downloading
    doFirst {
        if (!outputFile.parentFile.exists()) {
            outputFile.parentFile.mkdirs()
        }
    }
}
// Shadow JAR configuration
shadowJar {
    archiveBaseName.set('TempMon')
    archiveClassifier.set('')
    archiveVersion.set(version)
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

// Fix dependency issues between tasks
tasks.distZip.dependsOn tasks.shadowJar
tasks.distTar.dependsOn tasks.shadowJar
tasks.startScripts.dependsOn tasks.shadowJar

// OpenAPI client generation
openApiGenerate {
    generatorName = "typescript-fetch"
    inputSpec = "$projectDir/src/main/resources/openapi.json"
    outputDir = "$projectDir/frontend/src/generated"
    validateSpec = false

    typeMappings = [
            DateTime: "string",
            Date: "string"
    ]

    configOptions = [
            supportsES6: "true",
            enumPropertyNaming: "UPPERCASE",
            modelPropertyNaming: "original",
            useSingleRequestParameter: "true",
            withInterfaces: "true",
            includeUnreferencedSchemas: "true"
    ]
}
 def USERNAME = System.getenv()["POSTGRES_USER"] ?: "postgres"
 def PASSWORD = System.getenv()["POSTGRES_PASSWORD"] ?: "postgres"

jooq {
    version = jooqVersion
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/TempMon"
                    user = USERNAME
                    password = PASSWORD
                }
                generator {
                    name = "org.jooq.codegen.KotlinGenerator"
                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                    }
                    target {
                        packageName = "com.benlukka.jooq"
                        directory = "src/generated/jooqDatabase"
                    }
                    generate {
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        deprecated = false
                        pojosAsKotlinDataClasses = true
                    }
                }
            }
        }
    }
}
tasks.register('createOpenApiDirectory') {
    doLast {
        mkdir("$projectDir/src/main/resources")
    }
}
tasks.named("openApiGenerate"){
    enabled false
}

downloadOpenApiSpec.dependsOn createOpenApiDirectory
