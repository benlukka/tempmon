/* tslint:disable */
/* eslint-disable */
/**
 * Tempmon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Device,
  Measurement,
  MeasurmentsWithCount,
  OtaDevice,
  Room,
  TemperatureHumidityRequest,
} from '../models';
import {
    DeviceFromJSON,
    DeviceToJSON,
    MeasurementFromJSON,
    MeasurementToJSON,
    MeasurmentsWithCountFromJSON,
    MeasurmentsWithCountToJSON,
    OtaDeviceFromJSON,
    OtaDeviceToJSON,
    RoomFromJSON,
    RoomToJSON,
    TemperatureHumidityRequestFromJSON,
    TemperatureHumidityRequestToJSON,
} from '../models';

export interface GetAllDevicesRequest {
    limit?: number;
    offset?: number;
}

export interface GetAllMeasurementsRequest {
    limit?: number;
    offset?: number;
}

export interface GetAllMeasurementsForDeviceRequest {
    deviceMac: string;
    limit?: number;
    offset?: number;
}

export interface GetAvgHumidityInTimeRangeRequest {
    startTime?: string;
    endTime?: string;
}

export interface GetAvgTemperatureInTimeRangeRequest {
    startTime?: string;
    endTime?: string;
}

export interface GetMeasurementsForRoomRequest {
    room?: string;
    startTime?: string;
    endTime?: string;
}

export interface GetMeasurementsInTimeRangeRequest {
    startTime?: string;
    endTime?: string;
}

export interface SubmitMeasurementDataRequest {
    temperatureHumidityRequest: TemperatureHumidityRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Retrieves all devices from the database with pagination
     * @summary Get all devices
     * @param {number} [limit] Maximum number of measurements to retrieve (default: 100)
     * @param {number} [offset] Offset to start retrieving measurements from (default: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAllDevicesRaw(requestParameters: GetAllDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Device>>>;

    /**
     * Retrieves all devices from the database with pagination
     * Get all devices
     */
    getAllDevices(requestParameters: GetAllDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Device>>;

    /**
     * Retrieves all measurements from the database with pagination
     * @summary Get all measurements
     * @param {number} [limit] Maximum number of measurements to retrieve (default: 100)
     * @param {number} [offset] Offset to start retrieving measurements from (default: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAllMeasurementsRaw(requestParameters: GetAllMeasurementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeasurmentsWithCount>>;

    /**
     * Retrieves all measurements from the database with pagination
     * Get all measurements
     */
    getAllMeasurements(requestParameters: GetAllMeasurementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeasurmentsWithCount>;

    /**
     * Retrieves all measurements from the database with pagination for a specific device
     * @summary Get all measurements by device
     * @param {string} deviceMac MAC address of the device to filter measurements by
     * @param {number} [limit] Maximum number of measurements to retrieve (default: 100)
     * @param {number} [offset] Offset to start retrieving measurements from (default: 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAllMeasurementsForDeviceRaw(requestParameters: GetAllMeasurementsForDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>>;

    /**
     * Retrieves all measurements from the database with pagination for a specific device
     * Get all measurements by device
     */
    getAllMeasurementsForDevice(requestParameters: GetAllMeasurementsForDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>>;

    /**
     * 
     * @summary Get all OTA update capable devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAllOtaDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OtaDevice>>>;

    /**
     * Get all OTA update capable devices
     */
    getAllOtaDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OtaDevice>>;

    /**
     * Retrieves all rooms from the database, including their associated devices
     * @summary Get all rooms and their associated devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAllRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>>;

    /**
     * Retrieves all rooms from the database, including their associated devices
     * Get all rooms and their associated devices
     */
    getAllRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>>;

    /**
     * Retrieves average humidity from the database within a specified time range
     * @summary Get average humidity in time range
     * @param {string} [startTime] Start time in ISO format (default: 24 hours ago)
     * @param {string} [endTime] End time in ISO format (default: now)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAvgHumidityInTimeRangeRaw(requestParameters: GetAvgHumidityInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Retrieves average humidity from the database within a specified time range
     * Get average humidity in time range
     */
    getAvgHumidityInTimeRange(requestParameters: GetAvgHumidityInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * Retrieves average temperature from the database within a specified time range
     * @summary Get average temperature in time range
     * @param {string} [startTime] Start time in ISO format (default: 24 hours ago)
     * @param {string} [endTime] End time in ISO format (default: now)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAvgTemperatureInTimeRangeRaw(requestParameters: GetAvgTemperatureInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Retrieves average temperature from the database within a specified time range
     * Get average temperature in time range
     */
    getAvgTemperatureInTimeRange(requestParameters: GetAvgTemperatureInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * Retrieves the latest measurement for each device
     * @summary Get latest measurements by device
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLatestMeasurementsByDeviceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>>;

    /**
     * Retrieves the latest measurement for each device
     * Get latest measurements by device
     */
    getLatestMeasurementsByDevice(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>>;

    /**
     * Retrieves measurement for the given room
     * @summary Get latest measurements by device
     * @param {string} [room] the room name to filter measurements by
     * @param {string} [startTime] Start time in ISO format
     * @param {string} [endTime] End time in ISO format (default: now)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMeasurementsForRoomRaw(requestParameters: GetMeasurementsForRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>>;

    /**
     * Retrieves measurement for the given room
     * Get latest measurements by device
     */
    getMeasurementsForRoom(requestParameters: GetMeasurementsForRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>>;

    /**
     * Retrieves measurements from the database within a specified time range
     * @summary Get measurements in time range
     * @param {string} [startTime] Start time in ISO format (default: 24 hours ago)
     * @param {string} [endTime] End time in ISO format (default: now)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMeasurementsInTimeRangeRaw(requestParameters: GetMeasurementsInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>>;

    /**
     * Retrieves measurements from the database within a specified time range
     * Get measurements in time range
     */
    getMeasurementsInTimeRange(requestParameters: GetMeasurementsInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>>;

    /**
     * Submit temperature and/or humidity data from a device
     * @summary Submit measurement data
     * @param {TemperatureHumidityRequest} temperatureHumidityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    submitMeasurementDataRaw(requestParameters: SubmitMeasurementDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Submit temperature and/or humidity data from a device
     * Submit measurement data
     */
    submitMeasurementData(requestParameters: SubmitMeasurementDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Retrieves all devices from the database with pagination
     * Get all devices
     */
    async getAllDevicesRaw(requestParameters: GetAllDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Device>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceFromJSON));
    }

    /**
     * Retrieves all devices from the database with pagination
     * Get all devices
     */
    async getAllDevices(requestParameters: GetAllDevicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Device>> {
        const response = await this.getAllDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all measurements from the database with pagination
     * Get all measurements
     */
    async getAllMeasurementsRaw(requestParameters: GetAllMeasurementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeasurmentsWithCount>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeasurmentsWithCountFromJSON(jsonValue));
    }

    /**
     * Retrieves all measurements from the database with pagination
     * Get all measurements
     */
    async getAllMeasurements(requestParameters: GetAllMeasurementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeasurmentsWithCount> {
        const response = await this.getAllMeasurementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all measurements from the database with pagination for a specific device
     * Get all measurements by device
     */
    async getAllMeasurementsForDeviceRaw(requestParameters: GetAllMeasurementsForDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>> {
        if (requestParameters.deviceMac === null || requestParameters.deviceMac === undefined) {
            throw new runtime.RequiredError('deviceMac','Required parameter requestParameters.deviceMac was null or undefined when calling getAllMeasurementsForDevice.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.deviceMac !== undefined) {
            queryParameters['deviceMac'] = requestParameters.deviceMac;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/device`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeasurementFromJSON));
    }

    /**
     * Retrieves all measurements from the database with pagination for a specific device
     * Get all measurements by device
     */
    async getAllMeasurementsForDevice(requestParameters: GetAllMeasurementsForDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>> {
        const response = await this.getAllMeasurementsForDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all OTA update capable devices
     */
    async getAllOtaDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OtaDevice>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/otaDevices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OtaDeviceFromJSON));
    }

    /**
     * Get all OTA update capable devices
     */
    async getAllOtaDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OtaDevice>> {
        const response = await this.getAllOtaDevicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all rooms from the database, including their associated devices
     * Get all rooms and their associated devices
     */
    async getAllRoomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     * Retrieves all rooms from the database, including their associated devices
     * Get all rooms and their associated devices
     */
    async getAllRooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.getAllRoomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves average humidity from the database within a specified time range
     * Get average humidity in time range
     */
    async getAvgHumidityInTimeRangeRaw(requestParameters: GetAvgHumidityInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/avgHumidity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves average humidity from the database within a specified time range
     * Get average humidity in time range
     */
    async getAvgHumidityInTimeRange(requestParameters: GetAvgHumidityInTimeRangeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getAvgHumidityInTimeRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves average temperature from the database within a specified time range
     * Get average temperature in time range
     */
    async getAvgTemperatureInTimeRangeRaw(requestParameters: GetAvgTemperatureInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/avgTemperature`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves average temperature from the database within a specified time range
     * Get average temperature in time range
     */
    async getAvgTemperatureInTimeRange(requestParameters: GetAvgTemperatureInTimeRangeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getAvgTemperatureInTimeRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the latest measurement for each device
     * Get latest measurements by device
     */
    async getLatestMeasurementsByDeviceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeasurementFromJSON));
    }

    /**
     * Retrieves the latest measurement for each device
     * Get latest measurements by device
     */
    async getLatestMeasurementsByDevice(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>> {
        const response = await this.getLatestMeasurementsByDeviceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves measurement for the given room
     * Get latest measurements by device
     */
    async getMeasurementsForRoomRaw(requestParameters: GetMeasurementsForRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>> {
        const queryParameters: any = {};

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/measurements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeasurementFromJSON));
    }

    /**
     * Retrieves measurement for the given room
     * Get latest measurements by device
     */
    async getMeasurementsForRoom(requestParameters: GetMeasurementsForRoomRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>> {
        const response = await this.getMeasurementsForRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves measurements from the database within a specified time range
     * Get measurements in time range
     */
    async getMeasurementsInTimeRangeRaw(requestParameters: GetMeasurementsInTimeRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Measurement>>> {
        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/measurements/timerange`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeasurementFromJSON));
    }

    /**
     * Retrieves measurements from the database within a specified time range
     * Get measurements in time range
     */
    async getMeasurementsInTimeRange(requestParameters: GetMeasurementsInTimeRangeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Measurement>> {
        const response = await this.getMeasurementsInTimeRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit temperature and/or humidity data from a device
     * Submit measurement data
     */
    async submitMeasurementDataRaw(requestParameters: SubmitMeasurementDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.temperatureHumidityRequest === null || requestParameters.temperatureHumidityRequest === undefined) {
            throw new runtime.RequiredError('temperatureHumidityRequest','Required parameter requestParameters.temperatureHumidityRequest was null or undefined when calling submitMeasurementData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemperatureHumidityRequestToJSON(requestParameters.temperatureHumidityRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit temperature and/or humidity data from a device
     * Submit measurement data
     */
    async submitMeasurementData(requestParameters: SubmitMeasurementDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.submitMeasurementDataRaw(requestParameters, initOverrides);
    }

}
